{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","username","className","alt","src","CardList","robots","map","user","id","SearchBox","_","searchChange","onChange","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAeeA,EAbF,SAACC,GAAW,IACbC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,SACrB,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,aACpB,gCACI,6BAAKF,IACL,4BAAIC,WCOLK,EAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OAAQ,mCACJA,EAAOC,KAAI,SAAAC,GACP,OAAQ,cAAC,EAAD,CAEJC,GAAID,EAAKC,GACTV,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,MACZC,SAAUO,EAAKP,UAJVO,EAAKC,UCQXC,EAbG,SAAC,GAAsB,EAArBC,EAAsB,IAAnBC,EAAkB,EAAlBA,aACnB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIW,SAAUD,EACVV,UAAU,mCACVY,KAAK,SACLC,YAAY,qBCCbC,EARA,SAAClB,GACZ,OACI,qBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKtB,EAAMuB,YCiBJC,G,wDAnBX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAK7B,MAAMuB,a,GAhBEQ,cCoDbC,E,kDA5CX,aAAe,IAAD,8BAEV,gBAeJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAhB1C,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IALP,E,gEAUO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEtB,OAAQkC,S,+BASrC,IAAD,EAC2Bb,KAAKJ,MAA7BjB,EADH,EACGA,OAAQ2B,EADX,EACWA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAC5BZ,EAAYW,kBAGpB,OACI,sBAAK1C,UAAU,KAAf,UACI,oBAAIA,UAAU,SAAd,yBACA,cAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACI,eAAC,EAAD,YACMzB,EAAOwC,QAAU,yCACnB,cAAC,EAAD,CAAUxC,OAAQmC,gB,GAtCxBZ,aCIHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b8ee718.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const { name, email, username } = props;\n    return (\n        <div className='bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5'>\n            <img alt=\"robot\" src={`https://robohash.org/${username}?200x20`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (<>{\n        robots.map(user => {\n            return (<Card\n                key={user.id}\n                id={user.id} \n                name={user.name}\n                email={user.email}\n                username={user.username} />)\n        })\n    }</>);\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({_, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                onChange={searchChange}\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search Robots'\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n// Use class mode instead of method to use state\nclass App extends Component {\n\n    constructor() {\n        // Always call super before accessing this\n        super();\n        this.state = {\n            robots: [],\n            searchField: ''\n        };\n    }\n\n    // Since this is part of react, arrow function not mandatory\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }))\n    }\n\n    // Use arrow operator for this reference in event callbacks\n    onSearchChange = (event) => {\n        // Use instead of this.state.searchField = ''\n        this.setState({ searchField: event.target.value });\n    }\n\n    render() {\n        const { robots, searchField } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(\n                searchField.toLowerCase());\n        });\n\n        return (\n            <div className='tc'>\n                <h1 className='ttu f2'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        {!robots.length && <h2>Loading</h2>}\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}